// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 5GAkXaJ2X7qEVGyLW6URkW
// Component: 6UL6L3862Hyg
import * as React from "react";
import {
  PlasmicImg as PlasmicImg__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  hasVariant,
  initializeCodeComponentStates,
  renderPlasmicSlot,
  set as $stateSet,
  useDollarState
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv
} from "@plasmicapp/react-web/lib/host";

import { usePlasmicDataOp } from "@plasmicapp/react-web/lib/data-sources";
import { AntdPopover } from "@plasmicpkgs/antd5/skinny/registerPopover";
import { RichDetails } from "@plasmicpkgs/plasmic-rich-components/skinny/rich-details";
import { AntdMenu } from "@plasmicpkgs/antd5/skinny/registerMenu";
import { AntdMenuItem } from "@plasmicpkgs/antd5/skinny/registerMenu";
import Button from "../../Button"; // plasmic-import: -LisnOPJofcL/component
import Tilt from "@plasmicpkgs/react-parallax-tilt";
import { AntdPagination } from "@plasmicpkgs/antd5/skinny/registerPagination";
import { paginationHelpers as AntdPagination_Helpers } from "@plasmicpkgs/antd5/skinny/registerPagination";
import { DataFetcher } from "@plasmicpkgs/plasmic-query";
import Card from "../../Card"; // plasmic-import: AEwQa5n9bvp8/component
import { useScreenVariants as useScreenVariantseFkgQ5Oo74U } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: e-fkgQ5OO74u/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 5GAkXaJ2X7qEVGyLW6URkW/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: 6UL6L3862Hyg/css
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: 6YQ-s3QiGNsF/icon
import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: uZPcVb-BA-6n/icon
import SquareMinusSvgIcon from "./icons/PlasmicIcon__SquareMinusSvg"; // plasmic-import: wFP_NiOwExPb/icon
import olga4CamNatiPngJkEPnQv6Et89 from "./images/olga4CamNatiPng.png"; // plasmic-import: JkEPnQv6ET89/picture
import logolgaJpgDTwaEbJjDwkc from "./images/logolgaJpg.jpg"; // plasmic-import: dTWAEbJJDwkc/picture

createPlasmicElementProxy;

export const PlasmicHomepage__VariantProps = new Array();

export const PlasmicHomepage__ArgProps = new Array("children");

const $$ = {};

function PlasmicHomepage__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  let [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "listaConductores",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "pagination.currentPage",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.pagination.pageSize;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return 1;
              }
              throw e;
            }
          })(),
        onMutate: generateOnMutateForSpec("currentPage", AntdPagination_Helpers)
      },
      {
        path: "pagination.pageSize",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.pagination.endIndex;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return 10;
              }
              throw e;
            }
          })(),
        onMutate: generateOnMutateForSpec("pageSize", AntdPagination_Helpers)
      },
      {
        path: "pagination.startIndex",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("startIndex", AntdPagination_Helpers)
      },
      {
        path: "pagination.endIndex",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("endIndex", AntdPagination_Helpers)
      },
      {
        path: "unnamedGroupOfVariants",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          $props.unnamedGroupOfVariants
      },
      {
        path: "score.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });
  const new$Queries = {
    programasAirtable: usePlasmicDataOp(() => {
      return {
        sourceId: "ciLjmJy3vCpC5XPTRE4Mpe",
        opId: "99751c5a-543f-4aa1-a8ed-3eeff42bb036",
        userArgs: {},
        cacheKey: `plasmic.$.99751c5a-543f-4aa1-a8ed-3eeff42bb036.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    airprograms: usePlasmicDataOp(() => {
      return {
        sourceId: "ciLjmJy3vCpC5XPTRE4Mpe",
        opId: "3b8b3489-4f90-45b4-b550-70fbd13609b4",
        userArgs: {},
        cacheKey: `plasmic.$.3b8b3489-4f90-45b4-b550-70fbd13609b4.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    conductoresAirtable: usePlasmicDataOp(() => {
      return {
        sourceId: "ciLjmJy3vCpC5XPTRE4Mpe",
        opId: "09194b60-e45a-43bd-95d4-bd331be15d17",
        userArgs: {},
        cacheKey: `plasmic.$.09194b60-e45a-43bd-95d4-bd331be15d17.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);
    $queries = new$Queries;
  }
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantseFkgQ5Oo74U()
  });
  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <section className={classNames(projectcss.all, sty.section___1EcMx)}>
            <AntdPopover
              data-plasmic-name={"score"}
              data-plasmic-override={overrides.score}
              arrow={true}
              className={classNames("__wab_instance", sty.score)}
              content={
                <div
                  className={classNames(projectcss.all, sty.freeBox___3Ghap)}
                >
                  <RichDetails
                    data-plasmic-name={"dataDetails"}
                    data-plasmic-override={overrides.dataDetails}
                    bordered={true}
                    className={classNames("__wab_instance", sty.dataDetails)}
                    column={1}
                    data={(() => {
                      try {
                        return $queries.conductoresAirtable;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    layout={"vertical"}
                  />
                </div>
              }
              contentText={"Popover contents"}
              defaultOpen={false}
              defaultStylesClassName={classNames(
                projectcss.root_reset,
                projectcss.plasmic_default_styles,
                projectcss.plasmic_mixins,
                projectcss.plasmic_tokens,
                plasmic_antd_5_hostless_css.plasmic_tokens,
                plasmic_plasmic_rich_components_css.plasmic_tokens
              )}
              mouseEnterDelay={0}
              mouseLeaveDelay={0}
              onOpenChange={generateStateOnChangeProp($state, [
                "score",
                "open"
              ])}
              open={generateStateValueProp($state, ["score", "open"])}
              popoverContentClassName={classNames({
                [sty["pcls__4FEXQjGFJSR"]]: true
              })}
              popoverScopeClassName={sty["score__popover"]}
              title={
                <div
                  data-plasmic-name={"tusJugadas"}
                  data-plasmic-override={overrides.tusJugadas}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.tusJugadas
                  )}
                >
                  {"TUS JUGADAS:"}
                </div>
              }
              trigger={"click"}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__pdnqq
                )}
              >
                {"PUNTAJE: 500 "}
              </div>
            </AntdPopover>

            
            <AntdMenu
              data-plasmic-name={"menu"}
              data-plasmic-override={overrides.menu}
              className={classNames("__wab_instance", sty.menu)}
              mode={"horizontal"}
              multiple={false}
            >
              <AntdMenuItem
                className={classNames("__wab_instance", sty.menuItem__tDrt8)}
                danger={false}
                key={"menuItemKey1"}
                onClick={async () => {
                  const $steps = {};
                  $steps["updateListaConductores"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["listaConductores"]
                          },
                          operation: 0,
                          value: 1
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;
                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateListaConductores"] != null &&
                    typeof $steps["updateListaConductores"] === "object" &&
                    typeof $steps["updateListaConductores"].then === "function"
                  ) {
                    $steps["updateListaConductores"] = await $steps[
                      "updateListaConductores"
                    ];
                  }
                }}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__gx50O
                  )}
                >
                  {"ELEGIR CONDUCTORES"}
                </div>
              </AntdMenuItem>
              <AntdMenuItem
                className={classNames("__wab_instance", sty.menuItem__fYo1G)}
                key={"menuItemKey2"}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__wn4V
                  )}
                >
                  {"SHOWS"}
                </div>
              </AntdMenuItem>
            </AntdMenu>
          </section>
          {(() => {
            try {
              return $state.listaConductores;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <div className={classNames(projectcss.all, sty.freeBox__kkpMn)}>
              <Button
                className={classNames("__wab_instance", sty.button__qnOtc)}
                color={"blue"}
                onClick={async event => {
                  const $steps = {};
                  $steps["updateListaConductores"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["listaConductores"]
                          },
                          operation: 0,
                          value: 0
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;
                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateListaConductores"] != null &&
                    typeof $steps["updateListaConductores"] === "object" &&
                    typeof $steps["updateListaConductores"].then === "function"
                  ) {
                    $steps["updateListaConductores"] = await $steps[
                      "updateListaConductores"
                    ];
                  }
                }}
                shape={"rounded"}
                showStartIcon={true}
                startIcon={
                  <IconIcon
                    className={classNames(projectcss.all, sty.svg__yRnSy)}
                    role={"img"}
                  />
                }
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__cCfn8
                  )}
                >
                  {""}
                </div>
              </Button>
              <h1
                data-plasmic-name={"h1"}
                data-plasmic-override={overrides.h1}
                className={classNames(
                  projectcss.all,
                  projectcss.h1,
                  projectcss.__wab_text,
                  sty.h1
                )}
              >
                {"Selecciona la FORMACI\u00d3N\nde CONDUCTORES"}
              </h1>
              <section
                className={classNames(projectcss.all, sty.section__pLc4)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__mr2V2)}>
                  <Button
                    data-plasmic-name={"clear"}
                    data-plasmic-override={overrides.clear}
                    className={classNames("__wab_instance", sty.clear)}
                    endIcon={
                      <IconIcon
                        className={classNames(projectcss.all, sty.svg__q0Fjp)}
                        role={"img"}
                      />
                    }
                    shape={"sharp"}
                    size={"compact"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___2SYho
                      )}
                    >
                      {"limpiar seleccionados"}
                    </div>
                  </Button>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__cafUc)}
                  >
                    {(() => {
                      try {
                        return true;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })()
                      ? (_par =>
                          !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                          (() => {
                            try {
                              return $queries.conductoresAirtable.data;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [];
                              }
                              throw e;
                            }
                          })()
                        ).map((__plasmic_item_0, __plasmic_idx_0) => {
                          const currentItem = __plasmic_item_0;
                          const currentIndex = __plasmic_idx_0;
                          return (
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__fdQhK
                              )}
                              key={currentIndex}
                            >
                              {(() => {
                                try {
                                  return currentItem.AVATAR[0].url;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return true;
                                  }
                                  throw e;
                                }
                              })() ? (
                                <PlasmicImg__
                                  alt={""}
                                  className={classNames(sty.img__eaRh)}
                                  displayHeight={"auto"}
                                  displayMaxHeight={"none"}
                                  displayMaxWidth={"100%"}
                                  displayMinHeight={"0"}
                                  displayMinWidth={"0"}
                                  displayWidth={"56px"}
                                  loading={"lazy"}
                                  src={(() => {
                                    try {
                                      return currentItem.AVATAR[0].url;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()}
                                />
                              ) : null}
                              {(() => {
                                try {
                                  return (
                                    $queries.conductoresAirtable.data[
                                      currentIndex
                                    ].AVATAR[0].url != undefined
                                  );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return true;
                                  }
                                  throw e;
                                }
                              })() ? (
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__w5J
                                  )}
                                >
                                  <div
                                    data-plasmic-name={"bt1"}
                                    data-plasmic-override={overrides.bt1}
                                    className={classNames(
                                      projectcss.all,
                                      sty.bt1
                                    )}
                                  >
                                    <Button
                                      className={classNames(
                                        "__wab_instance",
                                        sty.button___6FpWr
                                      )}
                                    >
                                      <div
                                        data-plasmic-name={"_1"}
                                        data-plasmic-override={overrides._1}
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty._1
                                        )}
                                      >
                                        {"1"}
                                      </div>
                                    </Button>
                                  </div>
                                  <div
                                    data-plasmic-name={"bt2"}
                                    data-plasmic-override={overrides.bt2}
                                    className={classNames(
                                      projectcss.all,
                                      sty.bt2
                                    )}
                                  >
                                    <Button
                                      className={classNames(
                                        "__wab_instance",
                                        sty.button__mVsnt
                                      )}
                                    >
                                      <div
                                        data-plasmic-name={"_2"}
                                        data-plasmic-override={overrides._2}
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty._2
                                        )}
                                      >
                                        {"2"}
                                      </div>
                                    </Button>
                                  </div>
                                  <div
                                    data-plasmic-name={"bt3"}
                                    data-plasmic-override={overrides.bt3}
                                    className={classNames(
                                      projectcss.all,
                                      sty.bt3
                                    )}
                                  >
                                    <Button
                                      className={classNames(
                                        "__wab_instance",
                                        sty.button___1Lexd
                                      )}
                                    >
                                      <div
                                        data-plasmic-name={"_3"}
                                        data-plasmic-override={overrides._3}
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty._3
                                        )}
                                      >
                                        {"3"}
                                      </div>
                                    </Button>
                                  </div>
                                  <div
                                    data-plasmic-name={"bt4"}
                                    data-plasmic-override={overrides.bt4}
                                    className={classNames(
                                      projectcss.all,
                                      sty.bt4
                                    )}
                                  >
                                    <Button
                                      className={classNames(
                                        "__wab_instance",
                                        sty.button__qawad
                                      )}
                                    >
                                      <div
                                        data-plasmic-name={"_4"}
                                        data-plasmic-override={overrides._4}
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty._4
                                        )}
                                      >
                                        {"4"}
                                      </div>
                                    </Button>
                                  </div>
                                  <div
                                    data-plasmic-name={"bt5"}
                                    data-plasmic-override={overrides.bt5}
                                    className={classNames(
                                      projectcss.all,
                                      sty.bt5
                                    )}
                                  >
                                    <Button
                                      className={classNames(
                                        "__wab_instance",
                                        sty.button__xctIr
                                      )}
                                    >
                                      <div
                                        data-plasmic-name={"_7"}
                                        data-plasmic-override={overrides._7}
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty._7
                                        )}
                                      >
                                        {"5"}
                                      </div>
                                    </Button>
                                  </div>
                                  <div
                                    data-plasmic-name={"bt6"}
                                    data-plasmic-override={overrides.bt6}
                                    className={classNames(
                                      projectcss.all,
                                      sty.bt6
                                    )}
                                  >
                                    <Button
                                      className={classNames(
                                        "__wab_instance",
                                        sty.button__aVmlC
                                      )}
                                    >
                                      <div
                                        data-plasmic-name={"_8"}
                                        data-plasmic-override={overrides._8}
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty._8
                                        )}
                                      >
                                        {"6"}
                                      </div>
                                    </Button>
                                  </div>
                                </div>
                              ) : null}
                            </div>
                          );
                        })
                      : null}
                  </div>
                </div>
              </section>
            </div>
          ) : null}
          <section
            data-plasmic-name={"barra"}
            data-plasmic-override={overrides.barra}
            className={classNames(projectcss.all, sty.barra)}
          />

          <section
            data-plasmic-name={"conductores"}
            data-plasmic-override={overrides.conductores}
            className={classNames(projectcss.all, sty.conductores)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__uaXb0)}>
              <div className={classNames(projectcss.all, sty.freeBox__b8Ps0)}>
                <div
                  className={classNames(projectcss.all, sty.freeBox___4EIhX)}
                >
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__uHvP)}
                    displayHeight={
                      hasVariant(globalVariants, "screen", "tablet")
                        ? "176px"
                        : "auto"
                    }
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={
                      hasVariant(globalVariants, "screen", "tablet")
                        ? "321px"
                        : "auto"
                    }
                    loading={"lazy"}
                    src={{
                      src: olga4CamNatiPngJkEPnQv6Et89,
                      fullWidth: 604,
                      fullHeight: 332,
                      aspectRatio: undefined
                    }}
                  />
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__gq5Za)}>
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__cfR3Q)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    loading={"lazy"}
                    src={{
                      src: olga4CamNatiPngJkEPnQv6Et89,
                      fullWidth: 604,
                      fullHeight: 332,
                      aspectRatio: undefined
                    }}
                  />
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__taosf)}>
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__sMCs4)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    loading={"lazy"}
                    src={{
                      src: olga4CamNatiPngJkEPnQv6Et89,
                      fullWidth: 604,
                      fullHeight: 332,
                      aspectRatio: undefined
                    }}
                  />
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__eyVk2)}>
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__cmmij)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    loading={"lazy"}
                    src={{
                      src: olga4CamNatiPngJkEPnQv6Et89,
                      fullWidth: 604,
                      fullHeight: 332,
                      aspectRatio: undefined
                    }}
                  />
                </div>
                <div
                  className={classNames(projectcss.all, sty.freeBox___30C6A)}
                >
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__cGQcz)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    loading={"lazy"}
                    src={{
                      src: olga4CamNatiPngJkEPnQv6Et89,
                      fullWidth: 604,
                      fullHeight: 332,
                      aspectRatio: undefined
                    }}
                  />
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__k1Ae)}>
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__x7Rl8)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    loading={"lazy"}
                    src={{
                      src: olga4CamNatiPngJkEPnQv6Et89,
                      fullWidth: 604,
                      fullHeight: 332,
                      aspectRatio: undefined
                    }}
                  />
                </div>
              </div>
            </div>
          </section>
          <section
            data-plasmic-name={"form"}
            data-plasmic-override={overrides.form}
            className={classNames(projectcss.all, sty.form)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__qZyJj
              )}
            >
              {"ESTA COMBINACI\u00d3N:"}
            </div>
            <section
              data-plasmic-name={"botones"}
              data-plasmic-override={overrides.botones}
              className={classNames(projectcss.all, sty.botones)}
            >
              <div
                data-plasmic-name={"columns"}
                data-plasmic-override={overrides.columns}
                className={classNames(projectcss.all, sty.columns)}
              >
                <div className={classNames(projectcss.all, sty.column___8Xc1C)}>
                  <Button
                    className={classNames("__wab_instance", sty.button___80Qqo)}
                    color={"green"}
                    shape={"rounded"}
                    showStartIcon={true}
                    startIcon={
                      <CheckSvgIcon
                        className={classNames(projectcss.all, sty.svg__dqdXq)}
                        role={"img"}
                      />
                    }
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__xbSKd
                      )}
                    >
                      {"SUCEDI\u00d3 ALGUNA VEZ"}
                    </div>
                  </Button>
                  <Button
                    className={classNames("__wab_instance", sty.button__mbj43)}
                    color={"blue"}
                    shape={"rounded"}
                    showStartIcon={true}
                    startIcon={
                      <CheckSvgIcon
                        className={classNames(projectcss.all, sty.svg__keVl)}
                        role={"img"}
                      />
                    }
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__dOoBh
                      )}
                    >
                      {"(x3) EN ESE ORDEN"}
                    </div>
                  </Button>
                </div>
                <div className={classNames(projectcss.all, sty.column__li2H)}>
                  <Button
                    className={classNames("__wab_instance", sty.button__ki1CT)}
                    color={"red"}
                    shape={"rounded"}
                    showStartIcon={true}
                    startIcon={
                      <SquareMinusSvgIcon
                        className={classNames(projectcss.all, sty.svg___6DpGx)}
                        role={"img"}
                      />
                    }
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__vkY7
                      )}
                    >
                      {"(x2) NUNCA* SUCEDI\u00d3"}
                    </div>
                  </Button>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__e3Oju
                    )}
                  >
                    {
                      "*HASTA EL 13 DE NOVIEMBRE DE 2024\nEN 1158 VIDEOS DE YOUTUBE"
                    }
                  </div>
                </div>
              </div>
            </section>
          </section>
          <Tilt
            data-plasmic-name={"tilt"}
            data-plasmic-override={overrides.tilt}
            className={classNames("__wab_instance", sty.tilt)}
          >
            <section className={classNames(projectcss.all, sty.section__rSrPw)}>
              <div
                data-plasmic-name={"showsConEstosPersonajes"}
                data-plasmic-override={overrides.showsConEstosPersonajes}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.showsConEstosPersonajes
                )}
              >
                {"SHOWs CON \u00c9STA\nCOMBINACI\u00d3N"}
              </div>
            </section>
          </Tilt>
          <section
            data-plasmic-name={"programasAir"}
            data-plasmic-override={overrides.programasAir}
            className={classNames(projectcss.all, sty.programasAir)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__roNog)}>
              {(() => {
                const child$Props = {
                  className: classNames("__wab_instance", sty.pagination),
                  current: generateStateValueProp($state, [
                    "pagination",
                    "currentPage"
                  ]),
                  defaultCurrent: (() => {
                    try {
                      return $state.pagination.pageSize;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return 1;
                      }
                      throw e;
                    }
                  })(),
                  defaultPageSize: (() => {
                    try {
                      return $state.pagination.endIndex;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return 10;
                      }
                      throw e;
                    }
                  })(),
                  disabled: false,
                  onChange: async (...eventArgs) => {
                    generateStateOnChangePropForCodeComponents(
                      $state,
                      "currentPage",
                      ["pagination", "currentPage"],
                      AntdPagination_Helpers
                    ).apply(null, eventArgs);
                    generateStateOnChangePropForCodeComponents(
                      $state,
                      "startIndex",
                      ["pagination", "startIndex"],
                      AntdPagination_Helpers
                    ).apply(null, eventArgs);
                    generateStateOnChangePropForCodeComponents(
                      $state,
                      "endIndex",
                      ["pagination", "endIndex"],
                      AntdPagination_Helpers
                    ).apply(null, eventArgs);
                  },
                  onShowSizeChange: generateStateOnChangePropForCodeComponents(
                    $state,
                    "pageSize",
                    ["pagination", "pageSize"],
                    AntdPagination_Helpers
                  ),
                  pageSize: generateStateValueProp($state, [
                    "pagination",
                    "pageSize"
                  ]),
                  pageSizeOptions: [
                    { pageSize: 10 },
                    { pageSize: 20 },
                    { pageSize: 50 },
                    { pageSize: 100 }
                  ],

                  simple: true,
                  size: "small",
                  total: (() => {
                    try {
                      return $state.pagination.endIndex;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()
                };
                initializeCodeComponentStates(
                  $state,
                  [
                    {
                      name: "currentPage",
                      plasmicStateName: "pagination.currentPage"
                    },
                    {
                      name: "pageSize",
                      plasmicStateName: "pagination.pageSize"
                    },
                    {
                      name: "startIndex",
                      plasmicStateName: "pagination.startIndex"
                    },
                    {
                      name: "endIndex",
                      plasmicStateName: "pagination.endIndex"
                    }
                  ],

                  [],
                  AntdPagination_Helpers ?? {},
                  child$Props
                );
                return (
                  <AntdPagination
                    data-plasmic-name={"pagination"}
                    data-plasmic-override={overrides.pagination}
                    {...child$Props}
                  />
                );
              })()}
              <DataFetcher
                data-plasmic-name={"airtable"}
                data-plasmic-override={overrides.airtable}
                className={classNames("__wab_instance", sty.airtable)}
                dataName={"fetchedData"}
                errorDisplay={
                  <DataCtxReader__>
                    {$ctx => "Error fetching data"}
                  </DataCtxReader__>
                }
                errorName={"fetchError"}
                headers={{
                  "Content-Type": "application/json",
                  Accept: "application/json",
                  Authorization:
                    "Bearer patIgGHjjrlZmFYBY.c191c8ec1f5bc17bd9c4055d30516bc40021de79cee429399b118c89dcf34fdc"
                }}
                loadingDisplay={
                  <DataCtxReader__>{$ctx => "Loading..."}</DataCtxReader__>
                }
                method={"GET"}
                noLayout={false}
                previewErrorDisplay={false}
                previewSpinner={false}
                url={"https://api.airtable.com/v0/appu7BR9hZRtx80HC/PROGRAMAS?"}
              >
                <DataCtxReader__>
                  {$ctx =>
                    (_par =>
                      !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                      (() => {
                        try {
                          return $ctx.fetchedData.records.sort(
                            (a, b) => a.fields.ID_UNIQUE2 - b.fields.ID_UNIQUE2
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()
                    ).map((__plasmic_item_0, __plasmic_idx_0) => {
                      const currentItemP = __plasmic_item_0;
                      const currentIndexP = __plasmic_idx_0;
                      return (
                        <Card
                          data-plasmic-name={"programa"}
                          data-plasmic-override={overrides.programa}
                          className={classNames("__wab_instance", sty.programa)}
                          key={currentIndexP}
                          title={
                            <React.Fragment>
                              {(() => {
                                try {
                                  return (
                                    currentItemP.fields.PORTADA != undefined
                                  );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return true;
                                  }
                                  throw e;
                                }
                              })() ? (
                                <div
                                  data-plasmic-name={"fondoDefecto"}
                                  data-plasmic-override={overrides.fondoDefecto}
                                  className={classNames(
                                    projectcss.all,
                                    sty.fondoDefecto
                                  )}
                                >
                                  <PlasmicImg__
                                    alt={"_"}
                                    className={classNames(sty.img__hmIFk)}
                                    displayHeight={"auto"}
                                    displayMaxHeight={"none"}
                                    displayMaxWidth={"100%"}
                                    displayMinHeight={"0"}
                                    displayMinWidth={"0"}
                                    displayWidth={"auto"}
                                    height={"138"}
                                    loading={"lazy"}
                                    src={(() => {
                                      try {
                                        return currentItemP.fields.PORTADA;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return {
                                            src: logolgaJpgDTwaEbJjDwkc,
                                            fullWidth: 900,
                                            fullHeight: 900,
                                            aspectRatio: undefined
                                          };
                                        }
                                        throw e;
                                      }
                                    })()}
                                    width={"246"}
                                  />
                                </div>
                              ) : null}
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__dHFz
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__ihQx8
                                  )}
                                >
                                  <div
                                    className={projectcss.__wab_expr_html_text}
                                    dangerouslySetInnerHTML={{
                                      __html: (() => {
                                        try {
                                          return currentItemP.fields.TITULO;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return "Card title";
                                          }
                                          throw e;
                                        }
                                      })()
                                    }}
                                  />
                                </div>
                              </div>
                            </React.Fragment>
                          }
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__o91OQ
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__vcCfK
                              )}
                            >
                              {renderPlasmicSlot({
                                defaultContents: (
                                  <Button
                                    className={classNames(
                                      "__wab_instance",
                                      sty.button__xpBgs
                                    )}
                                    link={(() => {
                                      try {
                                        return (
                                          "https://www.youtube.com/watch?v=" +
                                          currentItemP.fields.v
                                        );
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()}
                                    target={true}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__hNElI
                                      )}
                                    >
                                      {"Ver Programa"}
                                    </div>
                                  </Button>
                                ),

                                value: args.children
                              })}
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__nqHtz
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return currentItemP.fields.SHOW;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "something here";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                          </div>
                        </Card>
                      );
                    })
                  }
                </DataCtxReader__>
              </DataFetcher>
            </div>
          </section>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "score",
    "dataDetails",
    "tusJugadas",
    "menu",
    "h1",
    "clear",
    "bt1",
    "_1",
    "bt2",
    "_2",
    "bt3",
    "_3",
    "bt4",
    "_4",
    "bt5",
    "_7",
    "bt6",
    "_8",
    "barra",
    "conductores",
    "form",
    "botones",
    "columns",
    "tilt",
    "showsConEstosPersonajes",
    "programasAir",
    "pagination",
    "airtable",
    "programa",
    "fondoDefecto"
  ],

  score: ["score", "dataDetails", "tusJugadas"],
  dataDetails: ["dataDetails"],
  tusJugadas: ["tusJugadas"],
  menu: ["menu"],
  h1: ["h1"],
  clear: ["clear"],
  bt1: ["bt1", "_1"],
  _1: ["_1"],
  bt2: ["bt2", "_2"],
  _2: ["_2"],
  bt3: ["bt3", "_3"],
  _3: ["_3"],
  bt4: ["bt4", "_4"],
  _4: ["_4"],
  bt5: ["bt5", "_7"],
  _7: ["_7"],
  bt6: ["bt6", "_8"],
  _8: ["_8"],
  barra: ["barra"],
  conductores: ["conductores"],
  form: ["form", "botones", "columns"],
  botones: ["botones", "columns"],
  columns: ["columns"],
  tilt: ["tilt", "showsConEstosPersonajes"],
  showsConEstosPersonajes: ["showsConEstosPersonajes"],
  programasAir: [
    "programasAir",
    "pagination",
    "airtable",
    "programa",
    "fondoDefecto"
  ],

  pagination: ["pagination"],
  airtable: ["airtable", "programa", "fondoDefecto"],
  programa: ["programa", "fondoDefecto"],
  fondoDefecto: ["fondoDefecto"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    score: makeNodeComponent("score"),
    dataDetails: makeNodeComponent("dataDetails"),
    tusJugadas: makeNodeComponent("tusJugadas"),
    menu: makeNodeComponent("menu"),
    h1: makeNodeComponent("h1"),
    clear: makeNodeComponent("clear"),
    bt1: makeNodeComponent("bt1"),
    _1: makeNodeComponent("_1"),
    bt2: makeNodeComponent("bt2"),
    _2: makeNodeComponent("_2"),
    bt3: makeNodeComponent("bt3"),
    _3: makeNodeComponent("_3"),
    bt4: makeNodeComponent("bt4"),
    _4: makeNodeComponent("_4"),
    bt5: makeNodeComponent("bt5"),
    _7: makeNodeComponent("_7"),
    bt6: makeNodeComponent("bt6"),
    _8: makeNodeComponent("_8"),
    barra: makeNodeComponent("barra"),
    conductores: makeNodeComponent("conductores"),
    form: makeNodeComponent("form"),
    botones: makeNodeComponent("botones"),
    columns: makeNodeComponent("columns"),
    tilt: makeNodeComponent("tilt"),
    showsConEstosPersonajes: makeNodeComponent("showsConEstosPersonajes"),
    programasAir: makeNodeComponent("programasAir"),
    pagination: makeNodeComponent("pagination"),
    airtable: makeNodeComponent("airtable"),
    programa: makeNodeComponent("programa"),
    fondoDefecto: makeNodeComponent("fondoDefecto"),
    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "jugar",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
